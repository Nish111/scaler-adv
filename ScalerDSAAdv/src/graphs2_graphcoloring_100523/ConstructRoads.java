package graphs2_graphcoloring_100523;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

// https://www.scaler.com/academy/mentee-dashboard/class/70951/assignment/problems/9424?navref=cl_tt_nv
public class ConstructRoads {

	public int solve(int A, int[][] B) { // not working
		 List<List<Integer>> adjList = new ArrayList<>();
		 int mod = 1000000007;
	     for(int i = 0 ; i <= A ; ++i){
	          adjList.add(new ArrayList<>());
	     }
	     for(int i = 0 ; i <B.length ; ++i) {
	         adjList.get(B[i][0]).add(B[i][1]);
	         adjList.get(B[i][1]).add(B[i][0]);
	     }
		int[] visited = new int[A+1];
		for(int i=0; i<A; i++) {
			visited[i]=-1;
		}
		int[] color=new int[A];
		for(int i=0; i<A; i++) {
			if(visited[i]==-1) {
				color = checkBipartite(i, visited, adjList);
			}
		}
		//printArray(visited);
		printArray(color);
		long cnt1=0, cnt2=0;
		for(int i=0; i<color.length-1; i++) {
			if(color[i]==1) cnt1++;
			else cnt2++;
		}
			
		//printArray2(adj);
		return (int) ((cnt1*cnt2)-(A-1));
		//return ((cnt1*cnt2)%mod-B.length)%mod;
		
	}
	public int[] checkBipartite(int node, int[] visited, List<List<Integer>>  adj) {
		// adj making array does not work
		
	   int n = adj.size();
       boolean ans = true;
       int [] color = new int[n];
       Arrays.fill(color,0);
       Queue<Integer> bfs = new LinkedList<>();
       bfs.add(node);
       visited[node] = 1;
       color[node] = 1;
       while(!bfs.isEmpty()){
           int front = bfs.poll();
           for(int u : adj.get(front)){
               if(visited[u]==1){
                   if(color[u] == color[front]){
                      ans = false;
                   }
               }
               else{
                   visited[u] = 1;
                   color[u] = color[front] ^ 1;
                   bfs.add(u);
               }
           }
       }
       //printArray(color);
       return color;
	}
	void printArray(int[] A) {
		for(int i=0; i<A.length; i++)
			System.out.print(A[i]+" ");
		System.out.println();
	}
	// should work
	int visited[];
    List<List<Integer>> adjList;
    int mod = 1000000007;
    public int solve2(int A, int[][] B) {
        visited = new int[A + 1];
        adjList = new ArrayList<>();
        for(int i = 0; i <= A; i++){
            adjList.add(new ArrayList<>());
        }
        for(int i = 0; i < B.length; i++){
            adjList.get(B[i][0]).add(B[i][1]);
            adjList.get(B[i][1]).add(B[i][0]);
        }
        for(int i = 1; i <= A; i++){
            if(visited[i] == 0) // default is 0
                bfs2(i);
        }
        long a = 0;
        long b = 0;
        for(int i = 1; i <= A; i++){
            if(visited[i] == 1)
                a++;
            else
                b++;
        }
        return (int)((a * b) % mod - B.length) % mod;
    }

    public void bfs2(int node){
        Queue<Integer> q = new LinkedList<>();
        q.add(node);
        int color = 1;
        visited[node] = color;
        while(!q.isEmpty()){
            int temp = q.poll();
            color = visited[temp] == 1 ? 2 : 1;
            for(int neighbor : adjList.get(temp)){
                if(visited[neighbor] == 0){
                    visited[neighbor] = color;
                    q.add(neighbor);
                }
            }
        }
    }
    static int maxn = 100009;
    static long[] col = new long[2];
    static long modScalerSol = 1000000007;
    static ArrayList < ArrayList < Integer > > adj;
    public static void graphScalerSol() {
        adj = new ArrayList < ArrayList < Integer > > (maxn);
        for (int i = 0; i < maxn; i++) {
            adj.add(new ArrayList < Integer > ());
        }
        col[0] = 0;
        col[1] = 0;
    }
    public int solveScalerSol(int A, int[][] B) {
        graphScalerSol();
        for (int[] edge: B) {
            adj.get(edge[0]).add(edge[1]);
            adj.get(edge[1]).add(edge[0]);
        }
        dfsScalerSol(1, 0, 0);
        long ans = col[0] * col[1];
        ans -= A - 1;
        ans %= modScalerSol;
        return (int) ans;
    }
    public static void dfsScalerSol(int u, int pnode, int c) {
        col[c]++;
        for (int v: adj.get(u)) {
            if (v != pnode) {
                dfsScalerSol(v, u, 1 - c);
            }
        }
    }
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		ConstructRoads cr = new ConstructRoads();
		int[][] B = {{1, 2}, {1, 3}};
		System.out.println(cr.solve(3,B)); // 0
		System.out.println(cr.solve2(3,B)); // 0
		int[][] A = {{1, 3}, {1, 4}, {3, 2}, {3, 5}};
		System.out.println(cr.solve(5,A)); // 2
		System.out.println(cr.solve2(5,A)); // 2
		int[][] C = {{0, 1}};
		System.out.println(cr.solve(2, C)); // 0
		System.out.println(cr.solve2(2, C)); // -1
		int[][] D = {{0, 1}, {0, 2}, {1, 2}};
		System.out.println(cr.solve(3, D)); // 0
		System.out.println(cr.solve2(3, D)); // -1
		int[][] E = {{529,522},{371,127},{477,420},{917,71},{506,500},{143,16},{489,237},{811,659},{636,437},{17,3},{793,180},{403,183},{709,474},{659,399},{305,42},{430,93},{103,54},{925,105},{578,119},{600,124},{157,98},{900,20},{975,970},{19,12},{894,230},{23,8},{3,1},{363,28},{320,70},{405,171},{149,62},{258,76},{338,333},{916,712},{108,50},{714,261},{205,124},{120,113},{521,438},{357,137},{56,28},{471,97},{397,304},{246,218},{1002,590},{206,31},{341,272},{766,409},{883,251},{635,65},{606,110},{218,102},{1063,705},{645,432},{583,264},{148,50},{846,144},{959,426},{945,523},{343,215},{106,9},{749,698},{727,574},{1035,641},{575,315},{910,68},{832,625},{292,235},{947,358},{953,622},{508,320},{899,686},{891,189},{928,869},{589,4},{5,2},{315,175},{30,18},{318,273},{691,356},{604,392},{372,266},{809,795},{626,151},{527,236},{1039,739},{1095,668},{717,225},{560,151},{164,45},{668,623},{134,48},{767,537},{940,306},{1046,993},{721,535},{852,788},{128,92},{990,537},{76,61},{88,62},{937,329},{965,726},{1032,492},{539,356},{778,74},{81,50},{901,891},{566,249},{344,176},{28,25},{46,22},{523,77},{53,8},{708,566},{844,329},{598,143},{361,185},{362,322},{110,91},{595,494},{1092,238},{27,9},{478,112},{444,227},{314,220},{944,37},{135,65},{34,20},{240,36},{388,300},{61,32},{221,106},{474,299},{185,129},{1100,788},{710,112},{324,194},{720,361},{356,244},{486,118},{1008,566},{214,179},{259,45},{139,45},{129,70},{163,83},{404,258},{406,314},{365,67},{484,290},{810,354},{597,339},{880,874},{93,43},{275,267},{1079,704},{159,122},{1001,650},{133,110},{39,28},{574,363},{482,354},{742,587},{780,218},{453,258},{472,392},{122,5},{295,99},{552,14},{637,470},{525,5},{232,157},{1017,184},{688,477},{621,300},{1052,427},{152,4},{11,3},{352,80},{790,35},{265,88},{648,519},{567,283},{499,307},{513,425},{800,301},{673,478},{689,406},{86,62},{407,261},{759,148},{752,167},{674,228},{982,292},{153,19},{1097,911},{374,334},{1107,217},{424,148},{905,782},{1062,97},{679,616},{150,100},{162,4},{840,155},{137,28},{310,169},{24,20},{1016,968},{599,300},{172,28},{815,623},{857,454},{923,426},{1023,782},{500,242},{919,915},{480,444},{942,822},{1013,888},{664,88},{323,27},{381,303},{906,236},{854,264},{909,63},{1044,695},{187,27},{151,143},{1104,329},{1106,458},{334,171},{266,64},{69,51},{121,88},{861,806},{228,189},{131,108},{98,47},{813,699},{1091,337},{1022,991},{924,920},{13,6},{38,23},{492,383},{550,344},{763,489},{220,79},{303,65},{123,74},{639,579},{946,630},{892,91},{1116,506},{581,259},{277,58},{572,516},{452,148},{420,322},{12,9},{254,65},{776,668},{537,328},{418,119},{52,17},{213,46},{1011,181},{207,64},{613,205},{117,27},{518,516},{321,314},{349,183},{998,818},{911,543},{704,506},{186,124},{325,213},{724,364},{175,52},{827,256},{476,318},{536,218},{638,458},{687,304},{91,27},{171,118},{1005,337},{1021,295},{409,369},{229,28},{438,209},{847,363},{841,811},{466,362},{160,8},{768,753},{620,557},{176,14},{1082,865},{966,520},{411,119},{483,224},{733,302},{571,532},{754,40},{198,174},{796,617},{907,344},{748,581},{337,280},{889,190},{302,153},{665,11},{582,302},{962,217},{548,449},{223,10},{694,559},{837,665},{654,129},{1026,500},{82,13},{339,180},{730,591},{1031,596},{89,63},{7,5},{672,610},{994,206},{562,4},{469,411},{591,39},{938,259},{327,245},{248,164},{400,104},{675,583},{509,450},{429,136},{642,603},{188,72},{629,86},{873,561},{242,230},{955,23},{66,11},{950,559},{757,529},{667,474},{703,508},{243,240},{9,5},{252,23},{18,13},{282,40},{414,165},{432,236},{826,632},{682,78},{156,11},{976,249},{490,69},{351,135},{941,69},{876,812},{803,283},{146,8},{316,204},{118,93},{1087,103},{512,240},{113,13},{36,27},{130,48},{322,83},{549,223},{358,240},{622,298},{280,109},{124,34},{615,88},{434,105},{735,453},{50,33},{1029,74},{1020,311},{551,300},{136,29},{918,264},{256,175},{807,34},{273,117},{882,183},{750,122},{997,611},{697,110},{412,133},{849,513},{1088,595},{78,47},{978,795},{716,566},{1025,925},{722,305},{580,351},{829,768},{908,801},{44,2},{961,850},{839,122},{29,1},{14,1},{588,409},{74,34},{497,354},{317,10},{286,208},{70,27},{264,77},{625,387},{1076,760},{805,234},{54,34},{183,11},{795,510},{1117,826},{507,359},{963,475},{972,646},{706,288},{879,500},{433,148},{692,124},{457,115},{865,226},{934,191},{1096,713},{1037,669},{298,35},{168,100},{154,2},{204,110},{904,161},{993,37},{245,65},{1102,76},{95,29},{436,285},{504,94},{821,330},{297,244},{952,545},{974,860},{660,306},{68,45},{330,214},{505,449},{751,7},{102,26},{370,77},{355,236},{396,269},{779,166},{657,572},{501,245},{670,188},{851,317},{202,127},{481,438},{1113,163},{37,12},{215,162},{31,10},{179,38},{627,241},{461,164},{738,66},{427,211},{995,886},{263,211},{646,622},{973,853},{71,45},{1030,155},{456,284},{939,772},{792,52},{1118,26},{293,160},{459,339},{391,289},{533,344},{105,94},{784,671},{987,512},{819,694},{410,143},{1066,97},{676,302},{1114,857},{84,58},{874,812},{872,857},{379,170},{557,419},{1089,665},{684,489},{652,591},{969,842},{57,40},{394,306},{886,527},{927,387},{166,4},{700,198},{464,64},{538,283},{1073,814},{559,76},{731,22},{713,449},{1028,3},{843,615},{364,157},{544,229},{968,335},{850,813},{262,234},{8,5},{661,363},{107,43},{545,72},{922,35},{348,304},{1110,810},{224,4},{455,3},{448,289},{125,57},{65,44},{167,151},{686,330},{986,589},{643,468},{929,91},{112,72},{249,83},{423,422},{956,105},{662,319},{954,30},{21,20},{83,78},{1036,847},{855,597},{495,287},{858,491},{345,312},{999,70},{761,58},{1090,1033},{610,93},{1010,139},{271,150},{328,82},{199,45},{896,304},{462,382},{868,226},{97,55},{227,5},{561,546},{546,107},{746,510},{817,158},{655,67},{1009,740},{272,9},{1050,172},{1041,865},{576,97},{1075,156},{707,434},{422,402},{209,2},{99,49},{983,11},{897,760},{542,170},{109,10},{634,503},{194,126},{367,84},{801,186},{877,73},{458,43},{41,31},{446,223},{528,426},{867,686},{253,190},{797,10},{830,767},{142,97},{441,121},{1083,271},{1059,871},{140,17},{35,16},{192,118},{786,149},{395,144},{594,570},{43,38},{553,214},{760,749},{970,270},{389,93},{984,575},{92,2},{833,336},{885,500},{585,19},{1094,1082},{658,376},{695,292},{530,282},{236,149},{90,30},{728,625},{10,6},{60,54},{454,20},{520,417},{196,83},{563,65},{555,442},{1045,393},{1038,637},{184,81},{1081,1026},{996,617},{848,498},{447,136},{838,276},{656,442},{231,71},{399,341},{702,450},{711,65},{699,66},{1040,1036},{1000,742},{745,534},{524,435},{771,366},{380,130},{174,9},{671,490},{114,62},{234,65},{270,118},{914,688},{584,324},{842,681},{63,49},{603,518},{503,88},{650,394},{383,150},{683,587},{912,272},{182,83},{177,6},{632,397},{663,95},{677,664},{532,336},{211,73},{607,496},{195,190},{718,554},{798,224},{290,268},{755,687},{960,142},{991,405},{235,53},{932,835},{729,483},{681,186},{712,290},{989,656},{601,245},{1064,226},{777,297},{353,103},{649,169},{1112,297},{836,8},{596,317},{1067,577},{190,78},{1098,637},{289,73},{740,233},{347,327},{147,62},{377,179},{605,83},{468,169},{158,134},{936,724},{274,51},{1006,303},{564,207},{445,430},{354,259},{487,64},{1004,470},{467,218},{161,65},{1103,1016},{541,475},{226,147},{417,86},{948,504},{609,330},{460,98},{1007,47},{608,235},{820,396},{59,14},{402,320},{715,585},{775,439},{587,23},{831,327},{680,653},{241,63},{878,177},{782,263},{864,514},{690,99},{1014,619},{862,760},{693,409},{921,297},{616,556},{463,25},{278,50},{111,30},{498,393},{1068,981},{569,369},{180,177},{1034,249},{94,93},{933,718},{979,18},{1019,541},{301,203},{514,1},{502,364},{25,12},{45,39},{781,463},{359,142},{342,102},{630,250},{331,97},{783,535},{257,76},{624,168},{16,1},{863,671},{494,203},{491,222},{647,436},{398,81},{1071,654},{1003,467},{104,97},{244,174},{804,593},{33,30},{913,32},{540,396},{653,208},{823,127},{382,205},{1099,155},{825,704},{239,183},{535,488},{465,3},{958,84},{1101,461},{618,96},{385,24},{556,455},{281,120},{251,183},{926,127},{573,383},{299,216},{602,103},{1086,474},{169,103},{669,604},{300,171},{138,48},{1047,160},{496,69},{1015,861},{493,343},{1053,380},{985,670},{132,66},{787,534},{368,187},{1043,159},{1070,8},{269,132},{488,54},{806,142},{416,178},{526,437},{881,532},{641,126},{392,362},{100,72},{115,91},{6,2},{51,15},{931,133},{770,428},{1077,282},{165,53},{335,136},{288,3},{233,177},{55,34},{393,152},{773,605},{903,191},{449,360},{866,654},{485,454},{1042,1011},{943,497},{1074,816},{350,202},{304,290},{737,132},{197,102},{1056,173},{816,248},{73,48},{732,48},{307,276},{1024,689},{32,24},{887,194},{1033,56},{306,121},{1027,709},{565,281},{1072,301},{705,275},{47,8},{628,204},{593,322},{426,164},{794,787},{212,185},{789,51},{875,227},{753,121},{554,319},{957,601},{747,422},{869,781},{340,267},{515,510},{1109,101},{116,83},{155,41},{765,50},{756,221},{217,97},{216,145},{736,260},{1111,528},{425,206},{439,271},{428,423},{835,828},{308,201},{964,543},{442,57},{633,531},{64,40},{893,132},{511,86},{144,27},{390,1},{346,330},{856,548},{860,837},{208,182},{1105,531},{170,22},{818,807},{435,301},{895,494},{977,752},{329,127},{888,10},{822,789},{319,157},{967,935},{531,425},{785,547},{267,176},{1058,887},{617,247},{701,289},{812,600},{40,11},{261,207},{386,36},{309,12},{678,523},{631,611},{450,383},{22,10},{333,265},{725,192},{26,17},{268,177},{1049,100},{296,194},{1085,38},{971,483},{49,22},{791,488},{726,343},{451,290},{191,178},{96,40},{312,49},{373,81},{517,108},{828,607},{79,8},{431,125},{915,816},{4,3},{769,281},{853,246},{992,282},{614,11},{291,134},{255,219},{698,170},{1093,355},{440,32},{238,89},{126,46},{1055,513},{210,158},{590,445},{48,12},{1069,707},{719,126},{2,1},{898,117},{189,59},{437,14},{930,465},{516,35},{145,65},{741,509},{723,296},{247,227},{772,701},{651,217},{369,294},{72,17},{366,298},{127,85},{285,112},{279,222},{802,622},{814,770},{58,54},{67,51},{870,684},{762,414},{219,24},{470,219},{1065,764},{15,4},{1054,995},{743,416},{375,37},{421,91},{311,186},{1108,830},{522,323},{1115,819},{384,247},{623,50},{902,100},{1084,464},{77,23},{62,24},{85,1},{834,625},{1078,195},{951,476},{619,311},{237,124},{1018,1000},{326,7},{788,18},{685,67},{173,106},{178,18},{260,144},{360,278},{640,447},{859,5},{981,261},{42,20},{250,222},{201,1},{558,122},{612,97},{294,293},{980,593},{276,255},{547,202},{415,148},{577,283},{586,245},{87,84},{413,31},{230,205},{534,433},{1012,748},{744,242},{871,717},{890,728},{284,7},{119,62},{696,326},{734,636},{473,108},{1048,972},{475,353},{200,176},{611,85},{222,9},{378,305},{764,216},{519,184},{336,103},{401,397},{141,81},{799,361},{101,72},{1051,866},{739,113},{543,485},{181,123},{443,356},{287,8},{479,394},{1061,766},{666,144},{510,218},{568,202},{988,125},{408,295},{75,27},{808,619},{845,379},{80,3},{920,685},{884,26},{644,177},{758,453},{592,228},{579,400},{935,455},{20,3},{283,202},{570,297},{419,129},{1057,961},{387,173},{824,661},{332,44},{1060,121},{225,28},{949,848},{376,10},{774,703},{193,17},{203,65},{313,151},{1080,609}};
		System.out.println(cr.solve(1118, E)); // 311264 -- 311283
		System.out.println(cr.solve2(1118, E)); // 311283
	}

}
